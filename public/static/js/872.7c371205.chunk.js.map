{"version":3,"file":"static/js/872.7c371205.chunk.js","mappings":"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","sources":["components/common/InfoModal.js","components/HomePage/skills/skills.js","hooks/translationUtils.js","../node_modules/src/observe.ts","../node_modules/src/InView.tsx","../node_modules/src/useInView.tsx"],"sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport tw from 'twin.macro';\n\nconst ModalBackdrop = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.5); /* Cor de fundo cinza escuro */\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst ModalContent = styled.div`\n${tw`z-50`}\n  background-color: #333; /* Cor de fundo cinza escuro */\n  color: white;\n  padding: 20px;\n  border-radius: 8px;\n  max-width: 80%;\n`;\n\nconst CloseButton = styled.span`\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  cursor: pointer;\n`;\n\nconst InfoModal = ({ isOpen, message, onClose }) => {\n  const handleClose = () => {\n    onClose();\n  };\n\n  return (\n    isOpen && (\n      <ModalBackdrop>\n        <ModalContent>\n          <CloseButton onClick={handleClose}>&times;</CloseButton>\n          <p>{message}</p>\n          <button onClick={handleClose}>Fechar</button>\n        </ModalContent>\n      </ModalBackdrop>\n    )\n  );\n};\n\nexport default InfoModal;","import React, { useState, useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport tw from 'twin.macro';\nimport InfoModal from '../../common/InfoModal';\nimport translationUtils from '../../../hooks/translationUtils';\nimport stacksData from '../../data/skills.json';\nimport myStacksTitle from '../../data/titles_and_others.json';\nimport { useInView } from 'react-intersection-observer';\n\nconst StacksContainer = styled.div`\n  ${tw`p-6 rounded-lg shadow-md container mx-auto`}\n  max-width: 1000px;\n  margin: 0 auto;\n`;\n\nconst CategoryContainer = styled.div`\n  ${tw`mb-6`}\n  opacity: ${({ $isvisible }) => ($isvisible ? 1 : 0)};\n  transition: opacity 0.7s ease;\n`;\n\nconst StacksTitle = styled.h3`\n  ${tw`text-white text-center mb-2 mt-2`}\n`;\n\nconst CategoryTitle = styled.h4`\n  ${tw`text-white text-center mb-2 mt-2`}\n  opacity: ${({ $isvisible }) => ($isvisible ? 1 : 0)};\n  transition: opacity 0.7s ease;\n  transition-delay: ${({ $delay }) => $delay}s;\n`;\n\nconst StackItemsContainer = styled.div`\n  ${tw`flex flex-wrap justify-center gap-3`}\n`;\n\nconst StackItem = styled.div`\n  ${tw`flex flex-col items-center justify-center text-center text-white bg-neutral-950 rounded-lg p-4 cursor-pointer`}\n  width: calc(100% / 6 - 2rem); \n  opacity: ${({ $isvisible }) => ($isvisible ? 1 : 0)};\n  transition: opacity 0.7s ease;\n\n  @media (max-width: 1440px) {\n    width: calc(100% / 5 - 2rem); \n  }\n\n  @media (max-width: 1080px) {\n    width: calc(100% / 5 - 2rem); \n  }\n\n  @media (max-width: 768px) {\n    width: calc(100% / 2 - 2rem); \n  }\n\n  &:hover {\n    background-color: rgba(255, 255, 255, 0.1);\n  }\n`;\n\nconst StackImg = styled.img`\n  ${tw`max-w-8 m-3`}\n`;\n\nconst StackTitle = styled.p`\n  ${tw`text-base`}\n`;\n\nconst StacksSection = ({ language }) => {\n  const [stacks, setStacks] = useState([]);\n  const [selectedStack, setSelectedStack] = useState(null);\n  const { ref, inView } = useInView({ triggerOnce: true });\n  const stackItemsRef = useRef([]);\n  const categoryRef = useRef([]);\n  \n\n\n  useEffect(() => {\n    const stacksArray = Object.values(stacksData).flatMap(category => category);\n    setStacks(stacksArray);\n  }, []);\n\n  useEffect(() => {\n    if (inView) {\n      categoryRef.current.forEach((category) => {\n        category.style.opacity = 1;\n      });\n  \n      stackItemsRef.current.forEach((item) => {\n        item.style.opacity = 1;\n      });\n    }\n  }, [inView]);\n\n  const groupByCategory = () => {\n    return stacks.reduce((acc, stack) => {\n      if (!acc[stack.category]) {\n        acc[stack.category] = [];\n      }\n      acc[stack.category].push(stack);\n      return acc;\n    }, {});\n  };\n\n  const handleStackItemClick = (stack) => {\n    setSelectedStack(stack);\n  };\n\n  const handleCloseModal = () => {\n    setSelectedStack(null);\n  };\n\n  return (\n    <div ref={ref}>\n      <StacksContainer>\n        <StacksTitle>{translationUtils('my_stacks_title', language, myStacksTitle)}</StacksTitle>\n        {Object.entries(groupByCategory()).map(([category, stacks], categoryIndex) => {\n          const totalItemsBeforeCategory = Object.keys(groupByCategory())\n            .slice(0, categoryIndex)\n            .reduce((acc, currCategory) => acc + groupByCategory()[currCategory].length, 0);\n          return (\n            <CategoryContainer\n              key={category}\n              ref={el => (categoryRef.current[categoryIndex] = el)}\n              $isvisible={inView}\n              style={{ transitionDelay: `${totalItemsBeforeCategory * 0.1}s` }}              \n            >\n              <CategoryTitle\n                key={categoryIndex}\n                $isvisible={inView}\n                $delay={totalItemsBeforeCategory * 0.1}\n              >\n                {translationUtils('categories_language', language, stacks[0])}\n              </CategoryTitle>\n              <StackItemsContainer>\n                {stacks.map((stack, index) => (\n                  <StackItem\n                    key={index}\n                    ref={el => (stackItemsRef.current[totalItemsBeforeCategory + index] = el)}\n                    onClick={() => handleStackItemClick(stack)}\n                    $isvisible={inView}\n                    style={{ transitionDelay: `${totalItemsBeforeCategory * 0.1 + index * 0.1}s` }}\n                  >\n                    <StackImg src={stack.skill_icon} alt={stack.skill_name} />\n                    <StackTitle>{stack.skill_name}</StackTitle>\n                  </StackItem>\n                ))}\n              </StackItemsContainer>\n            </CategoryContainer>\n          );\n        })}\n      </StacksContainer>\n\n      <InfoModal\n        isOpen={selectedStack !== null}\n        message={translationUtils('skill_description', language, selectedStack)}\n        onClose={handleCloseModal}\n      />\n    </div>\n  );\n};\n\nexport default StacksSection;\n","const translationUtils = (key, language, data) => {\n    if (data && data[key]) {\n      return data[key][language] || 'No text set';\n    } else {\n      return 'No Data set';\n    }\n  };\n\n  export default translationUtils","import type { ObserverInstanceCallback } from \"./index\";\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit[\"root\"]) {\n  if (!root) return \"0\";\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter(\n      (key) => options[key as keyof IntersectionObserverInit] !== undefined,\n    )\n    .map((key) => {\n      return `${key}_${\n        key === \"root\"\n          ? getRootId(options.root)\n          : options[key as keyof IntersectionObserverInit]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  const id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    // biome-ignore lint/style/useConst: It's fine to use let here, as we are going to assign it later\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === \"undefined\") {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === \"undefined\" &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === \"number\" ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  const callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from \"react\";\nimport type { IntersectionObserverProps, PlainChildrenProps } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== \"function\";\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidMount() {\n    this.unobserve();\n    this.observeNode();\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n  }\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n    if (typeof children === \"function\") {\n      const { inView, entry } = this.state;\n      return children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props as PlainChildrenProps;\n\n    return React.createElement(\n      as || \"div\",\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from \"react\";\nimport type { InViewHookResponse, IntersectionOptions } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions[\"onChange\"]>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: threshold is not correctly detected as a dependency\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element>();\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],"names":["ModalBackdrop","styled","div","_templateObject","_taggedTemplateLiteral","ModalContent","_templateObject2","CloseButton","span","_templateObject3","_ref","isOpen","message","onClose","handleClose","_jsx","children","_jsxs","onClick","StacksContainer","CategoryContainer","$isvisible","StacksTitle","h3","CategoryTitle","h4","_templateObject4","_ref2","_ref3","$delay","StackItemsContainer","_templateObject5","StackItem","_templateObject6","_ref4","StackImg","img","_templateObject7","StackTitle","p","_templateObject8","_ref5","language","stacks","setStacks","useState","selectedStack","setSelectedStack","ref","inView","useInView","triggerOnce","stackItemsRef","useRef","categoryRef","useEffect","stacksArray","Object","values","stacksData","flatMap","category","current","forEach","style","opacity","item","groupByCategory","reduce","acc","stack","push","translationUtils","myStacksTitle","entries","map","_ref6","categoryIndex","totalItemsBeforeCategory","keys","slice","currCategory","length","el","transitionDelay","concat","index","handleStackItemClick","src","skill_icon","alt","skill_name","InfoModal","handleCloseModal","key","data","observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","optionsToId","options","sort","filter","root","has","set","toString","get","observe","element","callback","arguments","undefined","fallbackInView","window","IntersectionObserver","bounds","getBoundingClientRect","isIntersecting","target","intersectionRatio","threshold","time","boundingClientRect","intersectionRect","rootBounds","id","observer","elements","instance","thresholds","entry","_a","some","trackVisibility","isVisible","Array","isArray","createObserver","callbacks","splice","indexOf","delete","unobserve","size","disconnect","React","delay","rootMargin","skip","initialInView","onChange","setRef","React2","state","setState","entryTarget","previousEntryTarget","result"],"sourceRoot":""}