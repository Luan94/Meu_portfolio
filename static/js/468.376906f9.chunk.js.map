{"version":3,"file":"static/js/468.376906f9.chunk.js","mappings":"8vDAWA,MAAMA,GAAYC,EAAAA,EAAAA,IAASC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,mJAYrBC,EAAkBC,EAAAA,GAAOC,IAAGC,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,kEACrBK,IAAA,IAAC,QAAEC,GAASD,EAAA,OAAKC,EAAU,EAAI,CAAC,IAGvCC,EAAiBL,EAAAA,GAAOM,QAAOC,IAAAA,GAAAT,EAAAA,EAAAA,GAAA,gBAC/B,ofAGAU,EAASR,EAAAA,GAAOC,IAAGQ,IAAAA,GAAAX,EAAAA,EAAAA,GAAA,gBACnB,2DAGAY,EAAOV,EAAAA,GAAOC,IAAGU,IAAAA,GAAAb,EAAAA,EAAAA,GAAA,qCACjB,2DAIAc,EAAaZ,EAAAA,GAAOC,IAAGY,IAAAA,GAAAf,EAAAA,EAAAA,GAAA,wEACvB,saACOgB,IAAA,IAAC,QAAEV,GAASU,EAAA,OAAKV,EAAU,EAAI,CAAC,IAIvCW,EAAef,EAAAA,GAAOgB,GAAEC,IAAAA,GAAAnB,EAAAA,EAAAA,GAAA,gBACxB,oGAGAoB,EAAqBlB,EAAAA,GAAOmB,EAACC,IAAAA,GAAAtB,EAAAA,EAAAA,GAAA,gBAC7B,0CAGAuB,EAASrB,EAAAA,GAAOsB,EAACC,IAAAA,GAAAzB,EAAAA,EAAAA,GAAA,4GACjB,6pBAQA0B,EAAsBxB,EAAAA,GAAOC,IAAGwB,IAAAA,GAAA3B,EAAAA,EAAAA,GAAA,mKAChC,6DACoB4B,GAOpBC,EAAwB3B,EAAAA,GAAOC,IAAG2B,IAAAA,GAAA9B,EAAAA,EAAAA,GAAA,gBAClC,qFAGA+B,EAAuB7B,EAAAA,GAAOC,IAAG6B,IAAAA,GAAAhC,EAAAA,EAAAA,GAAA,gBACjC,sBAGAiC,GAAmB/B,EAAAA,EAAAA,IAAOgC,EAAAA,EAAPhC,CAAuBiC,IAAAA,GAAAnC,EAAAA,EAAAA,GAAA,qFAC1C,+DAESH,GA6Cf,EA1CgBuC,IAAmB,IAAlB,SAAEC,GAAUD,EAC3B,MAAOE,EAAYC,IAAiBC,EAAAA,EAAAA,WAAS,IACtCC,EAAkBC,IAAuBF,EAAAA,EAAAA,WAAS,IAElDG,EAAKC,IAAUC,EAAAA,EAAAA,IAAU,CAC9BC,aAAa,EACbC,UAAW,IAUb,OAPAC,EAAAA,EAAAA,YAAU,KACJJ,IACFL,GAAc,GACdG,GAAoB,GACtB,GACC,CAACE,KAGFK,EAAAA,EAAAA,MAAC1C,EAAc,CAAC2C,GAAG,WAAWP,IAAKA,EAAIQ,SAAA,EACrCC,EAAAA,EAAAA,KAAC1C,EAAM,CAAAyC,UACLC,EAAAA,EAAAA,KAACnD,EAAe,CAACK,QAASgC,EAAWa,UACnCF,EAAAA,EAAAA,MAACrC,EAAI,CAAAuC,SAAA,EACHC,EAAAA,EAAAA,KAAA,MAAAD,UAAKE,EAAAA,EAAAA,GAAiB,iBAAkBhB,EAAUiB,MACjDD,EAAAA,EAAAA,GAAiB,mBAAoBhB,EAAUiB,WAItDL,EAAAA,EAAAA,MAACnC,EAAU,CAACR,QAASmC,EAAiBU,SAAA,EACpCC,EAAAA,EAAAA,KAAC1B,EAAmB,KACpBuB,EAAAA,EAAAA,MAACpB,EAAqB,CAAAsB,SAAA,EACpBC,EAAAA,EAAAA,KAACnC,EAAY,CAAAkC,UAAEE,EAAAA,EAAAA,GAAiB,0BAA2BhB,EAAUiB,MACrEF,EAAAA,EAAAA,KAAChC,EAAkB,CAAA+B,UAChBE,EAAAA,EAAAA,GAAiB,4BAA6BhB,EAAUiB,MAE3DF,EAAAA,EAAAA,KAACrB,EAAoB,CAAAoB,UACnBF,EAAAA,EAAAA,MAAC1B,EAAM,CAACgC,KAAK,YAAWJ,SAAA,EAAEE,EAAAA,EAAAA,GAAiB,2BAA4BhB,EAAUiB,GAAS,KAACF,EAAAA,EAAAA,KAACnB,EAAgB,CAACuB,KAAMC,EAAAA,mBAI1G,C,iCC5HrB,MAQE,EARuBJ,CAACK,EAAKrB,EAAUsB,IACjCA,GAAQA,EAAKD,GACRC,EAAKD,GAAKrB,IAAa,cAEvB,a,4RCFPuB,EAAc,IAAIC,IASlBC,EAA+C,IAAIC,QACrDC,EAAS,EAETC,OAAwC,EA6BrC,SAASC,EAAYC,GAC1B,OAAOC,OAAOC,KAAKF,GAChBG,OACAC,QACEb,QAA2D,IAAnDS,EAAQT,KAElBc,KAAKd,IACJ,MAAO,GAAPe,OAAUf,EAAG,KAAAe,OACH,SAARf,GArBWgB,EAsBGP,EAAQO,OApBxBZ,EAAQa,IAAID,KAChBV,GAAU,EACVF,EAAQc,IAAIF,EAAMV,EAAOa,aAFKf,EAAQgB,IAAIJ,IADxB,IAsBRP,EAAQT,IAvBpB,IAAmBgB,CAwBb,IAEDG,UACL,CA4DO,SAASE,EACdC,EACAC,GAGA,IAFAd,EAAAe,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAoC,CAAC,EACrCG,EAAAH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAiBjB,EAEjB,GACyC,qBAAhCqB,OAAOC,2BACK,IAAnBF,EACA,CACA,MAAMG,EAASR,EAAQS,wBAWvB,OAVAR,EAASI,EAAgB,CACvBK,eAAgBL,EAChBM,OAAQX,EACRY,kBAC+B,kBAAtBzB,EAAQpB,UAAyBoB,EAAQpB,UAAY,EAC9D8C,KAAM,EACNC,mBAAoBN,EACpBO,iBAAkBP,EAClBQ,WAAYR,IAEP,MAGT,CAEA,MAAM,GAAEtC,EAAA,SAAI+C,EAAA,SAAUC,GApFxB,SAAwB/B,GAEtB,MAAMjB,EAAKgB,EAAYC,GACvB,IAAIgC,EAAWvC,EAAYkB,IAAI5B,GAE/B,IAAKiD,EAAU,CAEb,MAAMD,EAAW,IAAIrC,IAErB,IAAIuC,EAEJ,MAAMH,EAAW,IAAIV,sBAAsBc,IACzCA,EAAQC,SAASC,IAvEvB,IAAAC,EA0EQ,MAAM5D,EACJ2D,EAAMb,gBACNU,EAAWK,MAAM1D,GAAcwD,EAAMX,mBAAqB7C,IAGxDoB,EAAQuC,iBAA8C,qBAApBH,EAAMI,YAG1CJ,EAAMI,UAAY/D,GAGpB,OAAA4D,EAAAN,EAASpB,IAAIyB,EAAMZ,UAAnBa,EAA4BF,SAASrB,IACnCA,EAASrC,EAAQ2D,EAAM,GACvB,GACF,GACDpC,GAGHiC,EACEH,EAASG,aACRQ,MAAMC,QAAQ1C,EAAQpB,WACnBoB,EAAQpB,UACR,CAACoB,EAAQpB,WAAa,IAE5BoD,EAAW,CACTjD,KACA+C,WACAC,YAGFtC,EAAYgB,IAAI1B,EAAIiD,EACtB,CAEA,OAAOA,CACT,CAmCqCW,CAAe3C,GAG5C4C,EAAYb,EAASpB,IAAIE,IAAY,GAQ3C,OAPKkB,EAASvB,IAAIK,IAChBkB,EAAStB,IAAII,EAAS+B,GAGxBA,EAAUC,KAAK/B,GACfgB,EAASlB,QAAQC,GAEV,WAEL+B,EAAUE,OAAOF,EAAUG,QAAQjC,GAAW,GAErB,IAArB8B,EAAU5B,SAEZe,EAASiB,OAAOnC,GAChBiB,EAASmB,UAAUpC,IAGC,IAAlBkB,EAASmB,OAEXpB,EAASqB,aACT1D,EAAYuD,OAAOjE,GAEvB,CACF,CC1GkCqE,EAAAA,UC7B3B,SAAS1E,IAWiC,IAXvB,UACxBE,EAAA,MACAyE,EAAA,gBACAd,EAAA,WACAe,EAAA/C,KACAA,EAAA,YACA5B,EAAA,KACA4E,EAAA,cACAC,EAAA,eACAtC,EAAA,SACAuC,GACF1C,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAyB,CAAC,EA9C1B,IAAAsB,EA+CE,MAAO7D,EAAKkF,GAAgBC,EAAAA,SAAyB,MAC/C7C,EAAiB6C,EAAAA,UAChBC,EAAOC,GAAkBF,EAAAA,SAAgB,CAC9ClF,SAAU+E,EACVpB,WAAO,IAKTtB,EAASgD,QAAUL,EAGbE,EAAAA,WACJ,KAEE,GAAIJ,IAAS/E,EAAK,OAElB,IAAIyE,EA4BJ,OA3BAA,EAAYrC,EACVpC,GACA,CAACC,EAAQ2D,KACPyB,EAAS,CACPpF,SACA2D,UAEEtB,EAASgD,SAAShD,EAASgD,QAAQrF,EAAQ2D,GAE3CA,EAAMb,gBAAkB5C,GAAesE,IAEzCA,IACAA,OAAY,EACd,GAEF,CACE1C,OACA+C,aACA1E,YAEA2D,kBAEAc,SAEFnC,GAGK,KACD+B,GACFA,GACF,CACD,GAIH,CAEER,MAAMC,QAAQ9D,GAAaA,EAAU8B,WAAa9B,EAClDJ,EACA+B,EACA+C,EACA3E,EACA4E,EACAhB,EACArB,EACAmC,IAIJ,MAAMU,EAAc,OAAA1B,EAAAuB,EAAMxB,YAAN,EAAAC,EAAab,OAC3BwC,EAA4BL,EAAAA,SAE/BnF,IACDuF,GACCpF,GACA4E,GACDS,EAAoBF,UAAYC,IAIhCC,EAAoBF,QAAUC,EAC9BF,EAAS,CACPpF,SAAU+E,EACVpB,WAAO,KAIX,MAAM6B,EAAS,CAACP,EAAQE,EAAMnF,OAAQmF,EAAMxB,OAO5C,OAJA6B,EAAOzF,IAAMyF,EAAO,GACpBA,EAAOxF,OAASwF,EAAO,GACvBA,EAAO7B,MAAQ6B,EAAO,GAEfA,CACT,C","sources":["components/HomePage/aboutMe/aboutme.js","hooks/translationUtils.js","../node_modules/src/observe.ts","../node_modules/src/InView.tsx","../node_modules/src/useInView.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport tw from 'twin.macro';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faChevronRight } from '@fortawesome/free-solid-svg-icons';\nimport translationUtils from '../../../hooks/translationUtils';\nimport aboutme from '../../data/aboutme.json';\nimport projectImage1 from '../../../assets/images/banner/bg-coding-3.webp';\nimport { useInView } from 'react-intersection-observer';\n\n\nconst moveRight = keyframes`\n  0% {\n    transform: translateX(0);\n  }\n  50% {\n    transform: translateX(2px);\n  }\n  100% {\n    transform: translateX(0);\n  }\n`;\n\nconst FadeInAnimation = styled.div`\n  opacity: ${({ $fadein }) => $fadein ? 1 : 0};\n  transition: opacity 1s ease-in-out;\n`;\nconst AboutMeSection = styled.section`\n  ${tw`text-white container mx-auto p-6 flex flex-col lg:flex-row lg:items-center mt-8 mb-4`}\n`;\n\nconst Column = styled.div`\n  ${tw`w-full lg:w-3/5`}\n`;\n\nconst Text = styled.div`\n  ${tw`text-lg text-left leading-relaxed`}\n  max-width: 600px;\n`;\n\nconst ProjectBox = styled.div`\n  ${tw`w-full lg:w-2/5 bg-gray-800 rounded-lg shadow-sm lg:ml-6 mt-6 lg:mt-0 bg-neutral-950`}\n  opacity: ${({ $fadein }) => $fadein ? 1 : 0};\n  transition: opacity 1s ease-in-out;\n`;\n\nconst ProjectTitle = styled.h4`\n  ${tw`text-lg font-bold mb-4 text-center`}\n`;\n\nconst ProjectDescription = styled.p`\n  ${tw`text-sm leading-relaxed`}\n`;\n\nconst Button = styled.a`\n  ${tw`inline-block mt-4 px-6 py-3 bg-blue-500 text-white rounded-lg text-center font-semibold hover:bg-blue-600 transition-colors outline outline-white outline-1 no-underline bg-transparent`}\n  transition: 0.2s ease;\n  &:hover {\n    background-color: white;\n    color:black;\n  }\n`;\n\nconst ProjectImageWrapper = styled.div`\n  ${tw`rounded-t-lg`}\n  background-image: url(${projectImage1});\n  width: 100%;\n  height: 25vh; /* Altura responsiva */\n  background-size: cover;\n  background-position: center;\n`;\n\nconst ProjectContentWrapper = styled.div`\n  ${tw`p-6 rounded-b-lg`}\n`;\n\nconst ProjectButtonWrapper = styled.div`\n  ${tw`text-center`}\n`;\n\nconst ChevronRightIcon = styled(FontAwesomeIcon)`\n  ${tw`ml-2 !bg-transparent`}\n  transition: 0.2s ease;\n  animation: ${moveRight} 1s ease-in-out infinite;\n`;\n\nconst AboutMe = ({ language }) => {\n  const [fadeInText, setFadeInText] = useState(false);\n  const [fadeInProjectBox, setFadeInProjectBox] = useState(false);  \n\n  const [ref, inView] = useInView({\n    triggerOnce: true,\n    threshold: 0\n  });\n\n  useEffect(() => {\n    if (inView) {\n      setFadeInText(true);\n      setFadeInProjectBox(true);\n    }\n  }, [inView]);\n\n  return (\n    <AboutMeSection id=\"about-me\" ref={ref}>\n      <Column>\n        <FadeInAnimation $fadein={fadeInText}>\n          <Text>\n            <h3>{translationUtils('about_me_title', language, aboutme)}</h3>\n            {translationUtils('about_me_content', language, aboutme)}\n          </Text>\n        </FadeInAnimation>\n      </Column>\n      <ProjectBox $fadein={fadeInProjectBox}>\n        <ProjectImageWrapper></ProjectImageWrapper>\n        <ProjectContentWrapper>\n          <ProjectTitle>{translationUtils('about_me_projects_title', language, aboutme)}</ProjectTitle>\n          <ProjectDescription>\n            {translationUtils('about_me_projects_content', language, aboutme)}\n          </ProjectDescription>\n          <ProjectButtonWrapper>\n            <Button href=\"/projetos\">{translationUtils('about_me_projects_button', language, aboutme)} <ChevronRightIcon icon={faChevronRight} /></Button>\n          </ProjectButtonWrapper>\n        </ProjectContentWrapper>\n      </ProjectBox>\n    </AboutMeSection>\n  );\n};\n\nexport default AboutMe;\n","const translationUtils = (key, language, data) => {\n    if (data && data[key]) {\n      return data[key][language] || 'No text set';\n    } else {\n      return 'No Data set';\n    }\n  };\n\n  export default translationUtils","import type { ObserverInstanceCallback } from \"./index\";\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit[\"root\"]) {\n  if (!root) return \"0\";\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter(\n      (key) => options[key as keyof IntersectionObserverInit] !== undefined,\n    )\n    .map((key) => {\n      return `${key}_${\n        key === \"root\"\n          ? getRootId(options.root)\n          : options[key as keyof IntersectionObserverInit]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  const id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    // biome-ignore lint/style/useConst: It's fine to use let here, as we are going to assign it later\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === \"undefined\") {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === \"undefined\" &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === \"number\" ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  const callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from \"react\";\nimport type { IntersectionObserverProps, PlainChildrenProps } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== \"function\";\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidMount() {\n    this.unobserve();\n    this.observeNode();\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n  }\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n    if (typeof children === \"function\") {\n      const { inView, entry } = this.state;\n      return children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props as PlainChildrenProps;\n\n    return React.createElement(\n      as || \"div\",\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from \"react\";\nimport type { InViewHookResponse, IntersectionOptions } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions[\"onChange\"]>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: threshold is not correctly detected as a dependency\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element>();\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],"names":["moveRight","keyframes","_templateObject","_taggedTemplateLiteral","FadeInAnimation","styled","div","_templateObject2","_ref","$fadein","AboutMeSection","section","_templateObject3","Column","_templateObject4","Text","_templateObject5","ProjectBox","_templateObject6","_ref2","ProjectTitle","h4","_templateObject7","ProjectDescription","p","_templateObject8","Button","a","_templateObject9","ProjectImageWrapper","_templateObject10","projectImage1","ProjectContentWrapper","_templateObject11","ProjectButtonWrapper","_templateObject12","ChevronRightIcon","FontAwesomeIcon","_templateObject13","_ref3","language","fadeInText","setFadeInText","useState","fadeInProjectBox","setFadeInProjectBox","ref","inView","useInView","triggerOnce","threshold","useEffect","_jsxs","id","children","_jsx","translationUtils","aboutme","href","icon","faChevronRight","key","data","observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","optionsToId","options","Object","keys","sort","filter","map","concat","root","has","set","toString","get","observe","element","callback","arguments","length","undefined","fallbackInView","window","IntersectionObserver","bounds","getBoundingClientRect","isIntersecting","target","intersectionRatio","time","boundingClientRect","intersectionRect","rootBounds","observer","elements","instance","thresholds","entries","forEach","entry","_a","some","trackVisibility","isVisible","Array","isArray","createObserver","callbacks","push","splice","indexOf","delete","unobserve","size","disconnect","React","delay","rootMargin","skip","initialInView","onChange","setRef","React2","state","setState","current","entryTarget","previousEntryTarget","result"],"sourceRoot":""}